# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:32:03+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    APIKeyQuery,
    BaseSecurity,
    UnsuportedSecurityStub,
)

from models import BehavioralEventHttpCompletionRequest, Error

app = MCPProxy(
    description='HTTP API for triggering instances of custom behavioral events',
    title='Custom Behavioral Events API',
    version='v3',
    servers=[{'url': 'https://api.hubapi.com/'}],
)


@app.post(
    '/events/v3/send',
    description=""" Endpoint to send an instance of a behavioral event """,
    tags=['event_handling'],
    security=[
        APIKeyQuery(name="hapikey"),
        APIKeyHeader(name="private-app-legacy"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def post__events_v3_send(body: BehavioralEventHttpCompletionRequest):
    """
    Sends Custom Behavioral Event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
